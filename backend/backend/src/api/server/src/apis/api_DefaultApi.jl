# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function create_agent_read(handler)
    function create_agent_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["CreateAgentRequest"] = OpenAPI.Servers.to_param_type(CreateAgentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function create_agent_validate(handler)
    function create_agent_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function create_agent_invoke(impl; post_invoke=nothing)
    function create_agent_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.create_agent(req::HTTP.Request, openapi_params["CreateAgentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_agent_read(handler)
    function delete_agent_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["agent_id"] = OpenAPI.Servers.to_param(String, path_params, "agent_id", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_agent_validate(handler)
    function delete_agent_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_agent_invoke(impl; post_invoke=nothing)
    function delete_agent_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_agent(req::HTTP.Request, openapi_params["agent_id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_agent_read(handler)
    function get_agent_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["agent_id"] = OpenAPI.Servers.to_param(String, path_params, "agent_id", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_agent_validate(handler)
    function get_agent_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_agent_invoke(impl; post_invoke=nothing)
    function get_agent_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_agent(req::HTTP.Request, openapi_params["agent_id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_agent_logs_read(handler)
    function get_agent_logs_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["agent_id"] = OpenAPI.Servers.to_param(String, path_params, "agent_id", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_agent_logs_validate(handler)
    function get_agent_logs_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_agent_logs_invoke(impl; post_invoke=nothing)
    function get_agent_logs_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_agent_logs(req::HTTP.Request, openapi_params["agent_id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_agent_output_read(handler)
    function get_agent_output_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["agent_id"] = OpenAPI.Servers.to_param(String, path_params, "agent_id", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_agent_output_validate(handler)
    function get_agent_output_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_agent_output_invoke(impl; post_invoke=nothing)
    function get_agent_output_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_agent_output(req::HTTP.Request, openapi_params["agent_id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_agents_read(handler)
    function list_agents_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_agents_validate(handler)
    function list_agents_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function list_agents_invoke(impl; post_invoke=nothing)
    function list_agents_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_agents(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_strategies_read(handler)
    function list_strategies_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_strategies_validate(handler)
    function list_strategies_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function list_strategies_invoke(impl; post_invoke=nothing)
    function list_strategies_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_strategies(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_tools_read(handler)
    function list_tools_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_tools_validate(handler)
    function list_tools_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function list_tools_invoke(impl; post_invoke=nothing)
    function list_tools_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_tools(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function process_agent_webhook_read(handler)
    function process_agent_webhook_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["agent_id"] = OpenAPI.Servers.to_param(String, path_params, "agent_id", required=true, )
        openapi_params["request_body"] = OpenAPI.Servers.to_param_type(Dict{String, Any}, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function process_agent_webhook_validate(handler)
    function process_agent_webhook_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function process_agent_webhook_invoke(impl; post_invoke=nothing)
    function process_agent_webhook_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.process_agent_webhook(req::HTTP.Request, openapi_params["agent_id"]; request_body=get(openapi_params, "request_body", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_agent_read(handler)
    function update_agent_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["agent_id"] = OpenAPI.Servers.to_param(String, path_params, "agent_id", required=true, )
        openapi_params["AgentUpdate"] = OpenAPI.Servers.to_param_type(AgentUpdate, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_agent_validate(handler)
    function update_agent_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_agent_invoke(impl; post_invoke=nothing)
    function update_agent_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_agent(req::HTTP.Request, openapi_params["agent_id"], openapi_params["AgentUpdate"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerDefaultApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/agents", OpenAPI.Servers.middleware(impl, create_agent_read, create_agent_validate, create_agent_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/agents/{agent_id}", OpenAPI.Servers.middleware(impl, delete_agent_read, delete_agent_validate, delete_agent_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/agents/{agent_id}", OpenAPI.Servers.middleware(impl, get_agent_read, get_agent_validate, get_agent_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/agents/{agent_id}/logs", OpenAPI.Servers.middleware(impl, get_agent_logs_read, get_agent_logs_validate, get_agent_logs_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/agents/{agent_id}/output", OpenAPI.Servers.middleware(impl, get_agent_output_read, get_agent_output_validate, get_agent_output_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/agents", OpenAPI.Servers.middleware(impl, list_agents_read, list_agents_validate, list_agents_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/strategies", OpenAPI.Servers.middleware(impl, list_strategies_read, list_strategies_validate, list_strategies_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/tools", OpenAPI.Servers.middleware(impl, list_tools_read, list_tools_validate, list_tools_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/agents/{agent_id}/webhook", OpenAPI.Servers.middleware(impl, process_agent_webhook_read, process_agent_webhook_validate, process_agent_webhook_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/agents/{agent_id}", OpenAPI.Servers.middleware(impl, update_agent_read, update_agent_validate, update_agent_invoke; optional_middlewares...))
    return router
end
