# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
Encapsulates generated server code for JuliaOSServer

The following server methods must be implemented:

- **create_agent**
    - *invocation:* POST /agents
    - *signature:* create_agent(req::HTTP.Request, create_agent_request::CreateAgentRequest;) -> AgentSummary
- **delete_agent**
    - *invocation:* DELETE /agents/{agent_id}
    - *signature:* delete_agent(req::HTTP.Request, agent_id::String;) -> Nothing
- **get_agent**
    - *invocation:* GET /agents/{agent_id}
    - *signature:* get_agent(req::HTTP.Request, agent_id::String;) -> AgentSummary
- **get_agent_logs**
    - *invocation:* GET /agents/{agent_id}/logs
    - *signature:* get_agent_logs(req::HTTP.Request, agent_id::String;) -> Dict{String, Any}
- **get_agent_output**
    - *invocation:* GET /agents/{agent_id}/output
    - *signature:* get_agent_output(req::HTTP.Request, agent_id::String;) -> Dict{String, Any}
- **list_agents**
    - *invocation:* GET /agents
    - *signature:* list_agents(req::HTTP.Request;) -> Vector{AgentSummary}
- **list_strategies**
    - *invocation:* GET /strategies
    - *signature:* list_strategies(req::HTTP.Request;) -> Vector{StrategySummary}
- **list_tools**
    - *invocation:* GET /tools
    - *signature:* list_tools(req::HTTP.Request;) -> Vector{ToolSummary}
- **process_agent_webhook**
    - *invocation:* POST /agents/{agent_id}/webhook
    - *signature:* process_agent_webhook(req::HTTP.Request, agent_id::String; request_body=nothing,) -> Nothing
- **update_agent**
    - *invocation:* PUT /agents/{agent_id}
    - *signature:* update_agent(req::HTTP.Request, agent_id::String, agent_update::AgentUpdate;) -> AgentSummary
"""
module JuliaOSServer

using HTTP
using URIs
using Dates
using TimeZones
using OpenAPI
using OpenAPI.Servers

const API_VERSION = "0.1.0"

include("modelincludes.jl")

include("apis/api_DefaultApi.jl")

"""
Register handlers for all APIs in this module in the supplied `Router` instance.

Paramerets:
- `router`: Router to register handlers in
- `impl`: module that implements the server methods

Optional parameters:
- `path_prefix`: prefix to be applied to all paths
- `optional_middlewares`: Register one or more optional middlewares to be applied to all requests.

Optional middlewares can be one or more of:
    - `init`: called before the request is processed
    - `pre_validation`: called after the request is parsed but before validation
    - `pre_invoke`: called after validation but before the handler is invoked
    - `post_invoke`: called after the handler is invoked but before the response is sent

The order in which middlewares are invoked are:
`init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke`
"""
function register(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    registerDefaultApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    return router
end

# export models
export AgentBlueprint
export AgentSummary
export AgentUpdate
export CreateAgentRequest
export StrategyBlueprint
export StrategySummary
export ToolBlueprint
export ToolSummary
export ToolSummaryMetadata
export TriggerConfig

end # module JuliaOSServer
