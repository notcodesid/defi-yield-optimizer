# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AgentSummary

    AgentSummary(;
        id=nothing,
        name=nothing,
        description=nothing,
        state=nothing,
        trigger_type=nothing,
        input_schema=nothing,
    )

    - id::String
    - name::String : Human-readable name of the agent
    - description::String : Brief summary of what the agent does
    - state::String : The current state of the agent
    - trigger_type::String : Specifies how the agent is activated
    - input_schema::Any : JSON-Schema describing the structure the agent expects as input when its &#x60;run&#x60; endpoint is invoked. Omitted when the agent declares no input type. 
"""
Base.@kwdef mutable struct AgentSummary <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    trigger_type::Union{Nothing, String} = nothing
    input_schema::Union{Nothing, Any} = nothing

    function AgentSummary(id, name, description, state, trigger_type, input_schema, )
        OpenAPI.validate_property(AgentSummary, Symbol("id"), id)
        OpenAPI.validate_property(AgentSummary, Symbol("name"), name)
        OpenAPI.validate_property(AgentSummary, Symbol("description"), description)
        OpenAPI.validate_property(AgentSummary, Symbol("state"), state)
        OpenAPI.validate_property(AgentSummary, Symbol("trigger_type"), trigger_type)
        OpenAPI.validate_property(AgentSummary, Symbol("input_schema"), input_schema)
        return new(id, name, description, state, trigger_type, input_schema, )
    end
end # type AgentSummary

const _property_types_AgentSummary = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("state")=>"String", Symbol("trigger_type")=>"String", Symbol("input_schema")=>"Any", )
OpenAPI.property_type(::Type{ AgentSummary }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AgentSummary[name]))}

function check_required(o::AgentSummary)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    o.state === nothing && (return false)
    o.trigger_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AgentSummary }, name::Symbol, val)
    if name === Symbol("state")
        OpenAPI.validate_param(name, "AgentSummary", :enum, val, ["CREATED", "RUNNING", "PAUSED", "STOPPED"])
    end
    if name === Symbol("trigger_type")
        OpenAPI.validate_param(name, "AgentSummary", :enum, val, ["PERIODIC", "WEBHOOK"])
    end
end
